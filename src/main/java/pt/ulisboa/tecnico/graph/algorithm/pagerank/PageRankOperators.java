package pt.ulisboa.tecnico.graph.algorithm.pagerank;

import org.apache.flink.api.common.functions.RichCoGroupFunction;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.util.Collector;

import java.util.Iterator;

public class PageRankOperators {

    public static class RankMergeOperator extends RichCoGroupFunction<Tuple2<Long, Double>, Tuple2<Long, Double>, Tuple2<Long, Double>> {

        private static final long serialVersionUID = -8323806114882000590L;
        private final Long bigVertexID;

        public RankMergeOperator(Long bigVertexID) {
            this.bigVertexID = bigVertexID;
        }

        @Override
        public void coGroup(Iterable<Tuple2<Long, Double>> previous, Iterable<Tuple2<Long, Double>> newRanks,
                            Collector<Tuple2<Long, Double>> out) throws Exception {
            Iterator<Tuple2<Long, Double>> prevIt = previous.iterator();
            Iterator<Tuple2<Long, Double>> newIt = newRanks.iterator();

            if (newIt.hasNext()) {
                Tuple2<Long, Double> next = newIt.next();
                // Avoid the big-vertex summarization construct which was generated by this.summaryGraph.run().
                if (!next.f0.equals(bigVertexID)) {
                    out.collect(next);
                }
            } else if (prevIt.hasNext()) {
                out.collect(prevIt.next());
            }
        }
    }
}
